# -*- coding: utf-8 -*-
"""Simulating and Filtering a Sine Wave Signal in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U--W_WrLMH5yqOAdwqr6lNTLCzWeEDR7
"""

pip install numpy matplotlib scipy

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

def generate_signal(frequencies, amplitudes, fs, duration=1):
    """
    Generate a composite signal consisting of sine waves and noise.

    Parameters:
    - frequencies: List of frequencies for the sine waves
    - amplitudes: List of amplitudes for the sine waves
    - fs: Sampling frequency
    - duration: Duration of the signal in seconds

    Returns:
    - t: Time vector
    - composite_signal: Composite signal
    """
    t = np.linspace(0, duration, fs, endpoint=False)
    composite_signal = sum(amplitude * np.sin(2 * np.pi * freq * t) for freq, amplitude in zip(frequencies, amplitudes))
    return t, composite_signal

def apply_lowpass_filter(signal_data, cutoff, fs, order=4):
    """
    Apply a low-pass Butterworth filter to the signal.

    Parameters:
    - signal_data: Input signal to be filtered
    - cutoff: Cutoff frequency
    - fs: Sampling frequency
    - order: Order of the filter

    Returns:
    - filtered_signal: Output of the filtered signal
    """
    sos = signal.butter(order, cutoff, btype='low', fs=fs, output='sos')
    return signal.sosfilt(sos, signal_data)

def plot_signals(t, original_signal, filtered_signal):
    """
    Plot the original and filtered signals along with the frequency response.

    Parameters:
    - t: Time vector
    - original_signal: Original signal with noise
    - filtered_signal: Filtered signal
    """
    plt.figure(figsize=(14, 10))

    # Original Signal with Noise
    plt.subplot(3, 1, 1)
    plt.plot(t, original_signal, color="blue", label='Noisy Signal')
    plt.title("Original Signal with Noise")
    plt.xlabel("Time [s]")
    plt.ylabel("Amplitude")
    plt.grid()
    plt.legend()

    # Filtered Signal
    plt.subplot(3, 1, 2)
    plt.plot(t, filtered_signal, color="green", label='Filtered Signal')
    plt.title("Filtered Signal (Low-pass Filter Applied)")
    plt.xlabel("Time [s]")
    plt.ylabel("Amplitude")
    plt.grid()
    plt.legend()

    # Frequency Response of the Filter
    w, h = signal.sosfreqz(signal.butter(4, 100, btype='low', fs=1000, output='sos'), fs=1000)
    plt.subplot(3, 1, 3)
    plt.plot(w, 20 * np.log10(abs(h)), color="red")
    plt.title("Frequency Response of the Low-pass Filter")
    plt.xlabel("Frequency [Hz]")
    plt.ylabel("Gain [dB]")
    plt.xlim(0, 500)
    plt.grid()

    plt.tight_layout()
    plt.show()

# Main script
if __name__ == "__main__":
    # Parameters
    fs = 1000  # Sampling frequency (Hz)
    frequencies = [50, 250]  # Frequencies: signal and noise
    amplitudes = [1, 0.5]  # Amplitudes for the signal and noise
    duration = 1  # Duration in seconds
    cutoff_frequency = 100  # Low-pass filter cutoff frequency (Hz)

    # Generate the signal
    t, original_signal = generate_signal(frequencies, amplitudes, fs, duration)

    # Apply the low-pass filter
    filtered_signal = apply_lowpass_filter(original_signal, cutoff_frequency, fs)

    # Plot the signals
    plot_signals(t, original_signal, filtered_signal)